#version 430 core

layout (local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

struct Vertex 
{
    vec4 position;
	vec4 normal;
    vec4 color;
};

struct Triangle
{
    vec3 A;
    vec3 B;
    vec3 C;
};

layout(std430, binding = 0) buffer VertexBuffer_i
{
    Vertex verticies_i[];
};

layout(std430, binding = 1) buffer IndexBuffer_i
{
    uint indicies_i[];
};

layout(std430, binding = 2) buffer VertexBuffer_j
{
    Vertex verticies_j[];
};

layout(std430, binding = 3) buffer IndexBuffer_j
{
    uint indicies_j[];
};

uniform uint nVertex_i;
uniform uint nVertex_j;
uniform uint nIndex_i;
uniform uint nIndex_j;

uniform mat4 modelMatrix_i;
uniform mat4 modelMatrix_j;


int rayTriangleIntersection(Triangle triangle, vec3 rayOrigin, vec3 rayDirection)
{
    const float EPSILON = 0.001e-9;
    
    vec3 e1 = triangle.B - triangle.A;
    vec3 e2 = triangle.C - triangle.A;
    vec3 p  = cross(rayDirection, e2);
    float det = dot(e1, p);
    
    // Ray is parallel to the triangle
    if (abs(det) < EPSILON) {
        return 0;
    }
    
    float invDet = 1.0 / det;
    
    vec3 T = rayOrigin - triangle.A;
    float u = dot(T, p) * invDet;
    if (u < 0.0 || u > 1.0) {
        return 0;
    }

    
    vec3 q = cross(T, e1);
    float v = dot(rayDirection, q) * invDet;
    if (v < 0.0 || (u + v) > 1.0) {
        return 0;
    }


    float t = dot(e2, q) * invDet;
    if(t > EPSILON) return 1;
    return 0;
}

void main()
{

	const uint threadID = gl_GlobalInvocationID.x;
    if(threadID >= nVertex_i) return;

    Vertex querryVertex = verticies_i[threadID];
    vec3 rayOrigin = vec3(modelMatrix_i * querryVertex.position);
    vec3 rayDirection = vec3(querryVertex.normal);

    uint count = 0;

    verticies_i[threadID].color = vec4(0.0f, 1.0f, 0.0f, 1.0f);
    for(int j = 0; j < nIndex_j; j += 3)
    {
        uint idx0 = indicies_j[j + 0];
        uint idx1 = indicies_j[j + 1];
        uint idx2 = indicies_j[j + 2];

        Triangle triangle = Triangle(
            vec3(modelMatrix_j * verticies_j[idx0].position),
            vec3(modelMatrix_j * verticies_j[idx1].position),
            vec3(modelMatrix_j * verticies_j[idx2].position)
        );

        if(rayTriangleIntersection(triangle, rayOrigin, rayDirection) == 1) count++;
        //if(rayTriangleIntersection(triangle, rayOrigin, rayDirection) == 2) verticies_i[threadID].color = vec4(1.0f, 0.0f, 0.0f, 1.0f);
        //if(rayTriangleIntersection(triangle, rayOrigin, rayDirection) == 3) verticies_i[threadID].color = vec4(1.0f, 0.0f, 0.0f, 1.0f);

    }

    if(count % 2 != 0) verticies_i[threadID].color = vec4(1.0f, 0.0f, 0.0f, 1.0f);
}

