#version 430 core

struct Box
{
	vec4 min;
	vec4 max;
};

struct LeafNode
{
	
    uint code;		// 0 aligned
    
    uint i0;		// 4 aligned
    uint i1;		// 8 aligned
    uint i2;		// 12 aligned

    Box box;		// 16 aligned

    int parent;	// 48 aligned

    uint pad0;		
    uint pad1;
    uint pad2;
};


layout (local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) buffer DataBufferIn
{
    LeafNode data_in[];
};

layout(std430, binding = 1) buffer DataBufferOut
{
    LeafNode data_out[];
};

layout(std430, binding = 2) buffer RelativeOffsetsBuffer
{
    uint relativeOffsets[];
};

layout(std430, binding = 3) buffer OffsetsBuffer
{
    uint offsets[];
};

uniform uint n;
uniform uint n_padded;
uniform uint bitStage;

void main()
{
    const uint threadID = gl_GlobalInvocationID.x;
    if(threadID >= n) return;
    
    uint value = data_in[threadID].code;
    uint bucket = (value >> bitStage) & 3;
    uint offset = offsets[bucket] + relativeOffsets[bucket * n_padded + threadID];

    data_out[offset] = data_in[threadID];
}